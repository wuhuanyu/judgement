function unzip(b64Data) {
        var strData ;
		if(!window.atob){
		//	strData	= $.base64.atob(b64Data)
		}else{
		//	strData = atob(b64Data)
		}
        var charData ;
		if (!Array.prototype.map) {
		 //  charData =iemap( strData.split(''),function (x) { return x.charCodeAt(0); },null);
		}else{
		//	charData = strData.split('').map(function (x) { return x.charCodeAt(0); });
		}
		
		strData = Base64_Zip.btou(RawDeflate.inflate(Base64_Zip.fromBase64(b64Data)));
       // var binData = new Uint8Array(charData);
      //  var data = pako.inflate(binData);
      //  strData = String.fromCharCode.apply(null, new Uint16Array(data));
        return strData;
}


var com = {};
com.str = {
    _KEY: "12345678900000001234567890000000",//32位
    _IV: "abcd134556abcedf",//16位
    /**************************************************************
    *字符串加密
    *   str：需要加密的字符串
    ****************************************************************/
    Encrypt: function (str) {
        var key = CryptoJS.enc.Utf8.parse(this._KEY);
        var iv = CryptoJS.enc.Utf8.parse(this._IV);

        var encrypted = '';

        var srcs = CryptoJS.enc.Utf8.parse(str);
        encrypted = CryptoJS.AES.encrypt(srcs, key, {
            iv: iv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });

        return encrypted.ciphertext.toString();
    },

    /**************************************************************
    *字符串解密
    *   str：需要解密的字符串
    ****************************************************************/
    Decrypt: function (str) {
		var result =  com.str.DecryptInner(str);
		 try {
            var newstr =  com.str.DecryptInner(result);
			if(newstr!=""){
				result = newstr;
			}
          } catch (ex) {
			var msg = ex;
        }
        return result;
    },
	 DecryptInner: function (str) {
        var key = CryptoJS.enc.Utf8.parse(this._KEY);
        var iv = CryptoJS.enc.Utf8.parse(this._IV);
        var encryptedHexStr = CryptoJS.enc.Hex.parse(str);
        var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);
        var decrypt = CryptoJS.AES.decrypt(srcs, key, {
            iv: iv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);
		var result =  decryptedStr.toString();
		 try {
            result =  Decrypt(result);
          } catch (ex) {
			var msg = ex;
        }
        return result;
    }
}


  function iemap(myarray ,callback, thisArg) {
 
        var T, A, k;
 
        if (myarray == null) {
            throw new TypeError(" this is null or not defined");
        }
        var O = Object(myarray);
 
        var len = O.length >>> 0; 
        if (typeof callback !== "function") {
            throw new TypeError(callback + " is not a function");
        }
 
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (thisArg) {
            T = thisArg;
        }
      
        A = new Array(len);
        k = 0;
        while(k < len) {
            var kValue, mappedValue;
            if (k in O) {               
                kValue = O[ k ]; 
                mappedValue = callback.call(T, kValue, k, O);
 
                A[ k ] = mappedValue;
            }
            k++;
        }
        return A;
    };
